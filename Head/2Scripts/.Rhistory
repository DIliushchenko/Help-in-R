Genes1$RecActivity[j] = sum(as.numeric(Rec$Length)*as.numeric(Rec$RecActivity)) / sum(Rec$Length)
}
Genes1$RecActivity = 0
if (nrow(Rec) >  1)
{
for (line in 1:nrow(Rec))
{ # line = 1
if (Rec$WindowStart[line] < Start) {Rec$WindowStart[line] = Start}
if (Rec$WindowEnd[line] > End) {Rec$WindowEnd[line] = End}
}
Rec$Length = Rec$WindowEnd - Rec$WindowStart
Genes1$RecActivity[j] = sum(as.numeric(Rec$Length)*as.numeric(Rec$RecActivity)) / sum(Rec$Length)
}
View(Rec)
Genes1$RecActivity[j]
as.numeric(Rec$Length)
sum(as.numeric(Rec$Length)*as.numeric(Rec$RecActivity))
as.numeric(Rec$RecActivity))
as.numeric(Rec$RecActivity)
View(Rec)
as.numeric(Rec$Rec)
sum(as.numeric(Rec$Length)*as.numeric(Rec$Rec))
sum(Rec$Length)
Genes1$RecActivity[j] = sum(as.numeric(Rec$Length)*as.numeric(Rec$Rec)) / sum(Rec$Length)
Genes1$RecActivity[j]
rm(list=ls(all = TRUE))
## read coverage for each window:
Roh = read.table("../../Body/3Results/CoverageROHForWindows.txt")
## read genes:
Genes = read.table("../../Body/1Raw/gencode.v25.annotation.gtf.Genes.Shet.pLI.FIS.RVIS.GHIS.KnKs.GC.BrainSpecificRanking.Branch", header = TRUE)
## unzip recomb map
unzip("../../Body/1Raw/RecombMap/plink.GRCh37.map.zip", exdir = "../../Body/1Raw/RecombMap/")
for (chr in 1:22)
{ # chr = 1
Genes1 = Genes[Genes$GeneChr == chr,];
Genes1$Coverage = 0
Genes1$RecActivity = 0
## get average recombination for each gene
infile = paste('../../Body/1Raw/RecombMap/plink.chr',chr,'.GRCh37.map',sep = ''); RecMap = read.table(infile)
RecMapStart = RecMap[-nrow(RecMap),c(3,4)]; names(RecMapStart)=c('RecStart','WindowStart')
RecMapEnd = RecMap[-1,c(3,4)]; names(RecMapEnd)=c('RecEnd','WindowEnd')
RecMap = cbind(RecMapStart,RecMapEnd); RecMap$Rec = RecMap$RecEnd-RecMap$RecStart
plot(RecMap$RecStart,RecMap$Rec, pch = '.', main = chr)
for (j in 1:nrow(Genes1))
{ # j = 5
Start = Genes1$GeneStart[j]; End = Genes1$GeneEnd[j];              #  169849631 169894267
Rec = RecMap[RecMap$WindowEnd > Start & RecMap$WindowStart < End,] #  169794359 170112399
if (nrow(Rec) == 1) {Genes1$RecActivity[j] = Rec$Rec}
if (nrow(Rec) >  1)
{
for (line in 1:nrow(Rec))
{ # line = 1
if (Rec$WindowStart[line] < Start) {Rec$WindowStart[line] = Start}
if (Rec$WindowEnd[line] > End) {Rec$WindowEnd[line] = End}
}
Rec$Length = Rec$WindowEnd - Rec$WindowStart
Genes1$RecActivity[j] = sum(as.numeric(Rec$Length)*as.numeric(Rec$Rec)) / sum(Rec$Length)
}
}
## get average ROH coverage for each gene
Roh1 = Roh[Roh$CHR == chr,]
for (j in 1:nrow(Genes1))
{ # j = 5
Start = Genes1$GeneStart[j]; End = Genes1$GeneEnd[j];             #  169849631 169894267
Roh2 = Roh1[Roh1$EndofWindow > Start & Roh1$StartofWindow < End,] #  169794359 170112399
if (nrow(Roh2) == 1) {Genes1$Coverage[j] = Roh2$coverage}
if (nrow(Roh2) >  1)
{
for (line in 1:nrow(Roh2))
{ # line = 1
if (Roh2$StartofWindow[line] < Start) {Roh2$StartofWindow[line] = Start}
if (Roh2$EndofWindow[line] > End) {Roh2$EndofWindow[line] = End}
}
Roh2$Length = Roh2$EndofWindow - Roh2$StartofWindow
Genes1$Coverage[j] = sum(as.numeric(Roh2$Length)*as.numeric(Roh2$coverage)) / sum(Roh2$Length)
}
}
if (chr == 1) {FINAL = Genes1}
if (chr >  1) {FINAL = rbind(FINAL,Genes1)}
} # warnings()
## delete all unziped recomb maps
# unzip("../../Body/1Raw/RecombMap/plink.GRCh37.map.zip", exdir = "../../Body/1Raw/RecombMap/")
View(FINAL)
rm(list=ls(all = TRUE))
## read coverage for each window:
Roh = read.table("../../Body/3Results/CoverageROHForWindows.txt")
## read genes:
Genes = read.table("../../Body/1Raw/gencode.v25.annotation.gtf.Genes.Shet.pLI.FIS.RVIS.GHIS.KnKs.GC.BrainSpecificRanking.Branch", header = TRUE)
unzip("../../Body/1Raw/RecombMap/plink.GRCh37.map.zip", exdir = "../../Body/1Raw/RecombMap/")
c(1:22)
Genes = Genes[Genes$GeneChr %in% c(1:22),]
nrow(Genes)
rm(list=ls(all = TRUE))
## read coverage for each window:
Roh = read.table("../../Body/3Results/CoverageROHForWindows.txt")
## read genes:
Genes = read.table("../../Body/1Raw/gencode.v25.annotation.gtf.Genes.Shet.pLI.FIS.RVIS.GHIS.KnKs.GC.BrainSpecificRanking.Branch", header = TRUE)
Genes = Genes[Genes$GeneChr %in% c(1:22),]; nrow(Genes)
## unzip recomb map
unzip("../../Body/1Raw/RecombMap/plink.GRCh37.map.zip", exdir = "../../Body/1Raw/RecombMap/")
for (chr in 1:22)
{ # chr = 1
Genes1 = Genes[Genes$GeneChr == chr,];
Genes1$Coverage = 0
Genes1$RecActivity = 0
## get average recombination for each gene
infile = paste('../../Body/1Raw/RecombMap/plink.chr',chr,'.GRCh37.map',sep = ''); RecMap = read.table(infile)
RecMapStart = RecMap[-nrow(RecMap),c(3,4)]; names(RecMapStart)=c('RecStart','WindowStart')
RecMapEnd = RecMap[-1,c(3,4)]; names(RecMapEnd)=c('RecEnd','WindowEnd')
RecMap = cbind(RecMapStart,RecMapEnd); RecMap$Rec = RecMap$RecEnd-RecMap$RecStart
plot(RecMap$RecStart,RecMap$Rec, pch = '.', main = chr)
for (j in 1:nrow(Genes1))
{ # j = 5
Start = Genes1$GeneStart[j]; End = Genes1$GeneEnd[j];              #  169849631 169894267
Rec = RecMap[RecMap$WindowEnd > Start & RecMap$WindowStart < End,] #  169794359 170112399
if (nrow(Rec) == 1) {Genes1$RecActivity[j] = Rec$Rec}
if (nrow(Rec) >  1)
{
for (line in 1:nrow(Rec))
{ # line = 1
if (Rec$WindowStart[line] < Start) {Rec$WindowStart[line] = Start}
if (Rec$WindowEnd[line] > End) {Rec$WindowEnd[line] = End}
}
Rec$Length = Rec$WindowEnd - Rec$WindowStart
Genes1$RecActivity[j] = sum(as.numeric(Rec$Length)*as.numeric(Rec$Rec)) / sum(Rec$Length)
}
}
## get average ROH coverage for each gene
Roh1 = Roh[Roh$CHR == chr,]
for (j in 1:nrow(Genes1))
{ # j = 5
Start = Genes1$GeneStart[j]; End = Genes1$GeneEnd[j];             #  169849631 169894267
Roh2 = Roh1[Roh1$EndofWindow > Start & Roh1$StartofWindow < End,] #  169794359 170112399
if (nrow(Roh2) == 1) {Genes1$Coverage[j] = Roh2$coverage}
if (nrow(Roh2) >  1)
{
for (line in 1:nrow(Roh2))
{ # line = 1
if (Roh2$StartofWindow[line] < Start) {Roh2$StartofWindow[line] = Start}
if (Roh2$EndofWindow[line] > End) {Roh2$EndofWindow[line] = End}
}
Roh2$Length = Roh2$EndofWindow - Roh2$StartofWindow
Genes1$Coverage[j] = sum(as.numeric(Roh2$Length)*as.numeric(Roh2$coverage)) / sum(Roh2$Length)
}
}
if (chr == 1) {FINAL = Genes1}
if (chr >  1) {FINAL = rbind(FINAL,Genes1)}
} # warnings()
## delete all unziped recomb maps
# unzip("../../Body/1Raw/RecombMap/plink.GRCh37.map.zip", exdir = "../../Body/1Raw/RecombMap/")
View(RecMap)
View(RecMap)
rm(list=ls(all = TRUE))
## read coverage for each window:
Roh = read.table("../../Body/3Results/CoverageROHForWindows.txt")
## read genes:
Genes = read.table("../../Body/1Raw/gencode.v25.annotation.gtf.Genes.Shet.pLI.FIS.RVIS.GHIS.KnKs.GC.BrainSpecificRanking.Branch", header = TRUE)
Genes = Genes[Genes$GeneChr %in% c(1:22),]; nrow(Genes)
## unzip recomb map
unzip("../../Body/1Raw/RecombMap/plink.GRCh37.map.zip", exdir = "../../Body/1Raw/RecombMap/")
chr = 1
Genes1 = Genes[Genes$GeneChr == chr,];
Genes1$Coverage = 0
Genes1$RecActivity = 0
## get average recombination for each gene
infile = paste('../../Body/1Raw/RecombMap/plink.chr',chr,'.GRCh37.map',sep = ''); RecMap = read.table(infile)
View(RecMap)
files <- list.files("../../Body/1Raw/RecombMap/")
files
files = files[-'plink.GRCh37.map.zip',]
files = files[-c('plink.GRCh37.map.zip'),]
files = files[-c('plink.GRCh37.map.zip')]
files = setdiff(files,c('plink.GRCh37.map.zip'))
files
files <- list.files("../../Body/1Raw/RecombMap/")
files
files = setdiff(files,c('plink.GRCh37.map.zip'))
files
i = 1
file.exists("../../Body/1Raw/RecombMap/files[i]")
files[i]
"../../Body/1Raw/RecombMap/files[i]"
file = paste("../../Body/1Raw/RecombMap/',files[i],sep='')
file = paste('../../Body/1Raw/RecombMap/',files[i],sep='')
)
)
)
file = paste('../../Body/1Raw/RecombMap/',files[i],sep='')
"
"
"
file = paste('../../Body/1Raw/RecombMap/',files[i],sep='')
file
if (file.exists(file)) file.remove(file)
rm(list=ls(all = TRUE))
## read coverage for each window:
Roh = read.table("../../Body/3Results/CoverageROHForWindows.txt")
## read genes:
Genes = read.table("../../Body/1Raw/gencode.v25.annotation.gtf.Genes.Shet.pLI.FIS.RVIS.GHIS.KnKs.GC.BrainSpecificRanking.Branch", header = TRUE)
Genes = Genes[Genes$GeneChr %in% c(1:22),]; nrow(Genes)
## unzip recomb map
unzip("../../Body/1Raw/RecombMap/plink.GRCh37.map.zip", exdir = "../../Body/1Raw/RecombMap/")
for (chr in 1:22)
{ # chr = 1
Genes1 = Genes[Genes$GeneChr == chr,];
Genes1$Coverage = 0
Genes1$RecActivity = 0
## get average recombination for each gene
infile = paste('../../Body/1Raw/RecombMap/plink.chr',chr,'.GRCh37.map',sep = ''); RecMap = read.table(infile)
RecMapStart = RecMap[-nrow(RecMap),c(3,4)]; names(RecMapStart)=c('RecStart','WindowStart')
RecMapEnd = RecMap[-1,c(3,4)]; names(RecMapEnd)=c('RecEnd','WindowEnd')
RecMap = cbind(RecMapStart,RecMapEnd); RecMap$Rec = RecMap$RecEnd-RecMap$RecStart
# plot(RecMap$RecStart,RecMap$Rec, pch = '.', main = chr)
for (j in 1:nrow(Genes1))
{ # j = 5
Start = Genes1$GeneStart[j]; End = Genes1$GeneEnd[j];              #  169849631 169894267
Rec = RecMap[RecMap$WindowEnd > Start & RecMap$WindowStart < End,] #  169794359 170112399
if (nrow(Rec) == 1) {Genes1$RecActivity[j] = Rec$Rec}
if (nrow(Rec) >  1)
{
for (line in 1:nrow(Rec))
{ # line = 1
if (Rec$WindowStart[line] < Start) {Rec$WindowStart[line] = Start}
if (Rec$WindowEnd[line] > End) {Rec$WindowEnd[line] = End}
}
Rec$Length = Rec$WindowEnd - Rec$WindowStart
Genes1$RecActivity[j] = sum(as.numeric(Rec$Length)*as.numeric(Rec$Rec)) / sum(Rec$Length)
}
}
## get average ROH coverage for each gene
Roh1 = Roh[Roh$CHR == chr,]
for (j in 1:nrow(Genes1))
{ # j = 5
Start = Genes1$GeneStart[j]; End = Genes1$GeneEnd[j];             #  169849631 169894267
Roh2 = Roh1[Roh1$EndofWindow > Start & Roh1$StartofWindow < End,] #  169794359 170112399
if (nrow(Roh2) == 1) {Genes1$Coverage[j] = Roh2$coverage}
if (nrow(Roh2) >  1)
{
for (line in 1:nrow(Roh2))
{ # line = 1
if (Roh2$StartofWindow[line] < Start) {Roh2$StartofWindow[line] = Start}
if (Roh2$EndofWindow[line] > End) {Roh2$EndofWindow[line] = End}
}
Roh2$Length = Roh2$EndofWindow - Roh2$StartofWindow
Genes1$Coverage[j] = sum(as.numeric(Roh2$Length)*as.numeric(Roh2$coverage)) / sum(Roh2$Length)
}
}
if (chr == 1) {FINAL = Genes1}
if (chr >  1) {FINAL = rbind(FINAL,Genes1)}
} # warnings()
## delete all unziped recomb map files
files <- list.files("../../Body/1Raw/RecombMap/")
files = setdiff(files,c('plink.GRCh37.map.zip'))
for (i in 1:length(files))
{ # i = 1
file = paste('../../Body/1Raw/RecombMap/',files[i],sep='')
if (file.exists(file)) file.remove(file)
}
View(FINAL)
rm(list=ls(all = TRUE))
## read coverage for each window:
Roh = read.table("../../Body/3Results/CoverageROHForWindows.txt")
## read genes:
Genes = read.table("../../Body/1Raw/gencode.v25.annotation.gtf.Genes.Shet.pLI.FIS.RVIS.GHIS.KnKs.GC.BrainSpecificRanking.Branch", header = TRUE)
Genes = Genes[Genes$GeneChr %in% c(1:22),]; nrow(Genes)
## unzip recomb map
unzip("../../Body/1Raw/RecombMap/plink.GRCh37.map.zip", exdir = "../../Body/1Raw/RecombMap/")
for (chr in 1:22)
{ # chr = 1
Genes1 = Genes[Genes$GeneChr == chr,];
Genes1$RohCoverage = 0
Genes1$RecombActivity = 0
## get average recombination for each gene
infile = paste('../../Body/1Raw/RecombMap/plink.chr',chr,'.GRCh37.map',sep = ''); RecMap = read.table(infile)
RecMapStart = RecMap[-nrow(RecMap),c(3,4)]; names(RecMapStart)=c('RecStart','WindowStart')
RecMapEnd = RecMap[-1,c(3,4)]; names(RecMapEnd)=c('RecEnd','WindowEnd')
RecMap = cbind(RecMapStart,RecMapEnd); RecMap$Rec = RecMap$RecEnd-RecMap$RecStart
# plot(RecMap$RecStart,RecMap$Rec, pch = '.', main = chr)
for (j in 1:nrow(Genes1))
{ # j = 5
Start = Genes1$GeneStart[j]; End = Genes1$GeneEnd[j];              #  169849631 169894267
Rec = RecMap[RecMap$WindowEnd > Start & RecMap$WindowStart < End,] #  169794359 170112399
if (nrow(Rec) == 1) {Genes1$RecActivity[j] = Rec$Rec}
if (nrow(Rec) >  1)
{
for (line in 1:nrow(Rec))
{ # line = 1
if (Rec$WindowStart[line] < Start) {Rec$WindowStart[line] = Start}
if (Rec$WindowEnd[line] > End) {Rec$WindowEnd[line] = End}
}
Rec$Length = Rec$WindowEnd - Rec$WindowStart
Genes1$RecombActivity[j] = sum(as.numeric(Rec$Length)*as.numeric(Rec$Rec)) / sum(Rec$Length)
}
}
## get average ROH coverage for each gene
Roh1 = Roh[Roh$CHR == chr,]
for (j in 1:nrow(Genes1))
{ # j = 5
Start = Genes1$GeneStart[j]; End = Genes1$GeneEnd[j];             #  169849631 169894267
Roh2 = Roh1[Roh1$EndofWindow > Start & Roh1$StartofWindow < End,] #  169794359 170112399
if (nrow(Roh2) == 1) {Genes1$Coverage[j] = Roh2$coverage}
if (nrow(Roh2) >  1)
{
for (line in 1:nrow(Roh2))
{ # line = 1
if (Roh2$StartofWindow[line] < Start) {Roh2$StartofWindow[line] = Start}
if (Roh2$EndofWindow[line] > End) {Roh2$EndofWindow[line] = End}
}
Roh2$Length = Roh2$EndofWindow - Roh2$StartofWindow
Genes1$RohCoverage[j] = sum(as.numeric(Roh2$Length)*as.numeric(Roh2$coverage)) / sum(Roh2$Length)
}
}
if (chr == 1) {FINAL = Genes1}
if (chr >  1) {FINAL = rbind(FINAL,Genes1)}
} # warnings()
## delete all unziped recomb map files
files <- list.files("../../Body/1Raw/RecombMap/")
files = setdiff(files,c('plink.GRCh37.map.zip'))
for (i in 1:length(files))
{ # i = 1
file = paste('../../Body/1Raw/RecombMap/',files[i],sep='')
if (file.exists(file)) file.remove(file)
}
rm(list=ls(all = TRUE))
## read coverage for each window:
Roh = read.table("../../Body/3Results/CoverageROHForWindows.txt")
## read genes:
Genes = read.table("../../Body/1Raw/gencode.v25.annotation.gtf.Genes.Shet.pLI.FIS.RVIS.GHIS.KnKs.GC.BrainSpecificRanking.Branch", header = TRUE)
Genes = Genes[Genes$GeneChr %in% c(1:22),]; nrow(Genes)
## unzip recomb map
unzip("../../Body/1Raw/RecombMap/plink.GRCh37.map.zip", exdir = "../../Body/1Raw/RecombMap/")
for (chr in 1:22)
{ # chr = 1
Genes1 = Genes[Genes$GeneChr == chr,];
Genes1$RohCoverage = 0
Genes1$RecombActivity = 0
## get average recombination for each gene
infile = paste('../../Body/1Raw/RecombMap/plink.chr',chr,'.GRCh37.map',sep = ''); RecMap = read.table(infile)
RecMapStart = RecMap[-nrow(RecMap),c(3,4)]; names(RecMapStart)=c('RecStart','WindowStart')
RecMapEnd = RecMap[-1,c(3,4)]; names(RecMapEnd)=c('RecEnd','WindowEnd')
RecMap = cbind(RecMapStart,RecMapEnd); RecMap$Rec = RecMap$RecEnd-RecMap$RecStart
# plot(RecMap$RecStart,RecMap$Rec, pch = '.', main = chr)
for (j in 1:nrow(Genes1))
{ # j = 5
Start = Genes1$GeneStart[j]; End = Genes1$GeneEnd[j];              #  169849631 169894267
Rec = RecMap[RecMap$WindowEnd > Start & RecMap$WindowStart < End,] #  169794359 170112399
if (nrow(Rec) == 1) {Genes1$RecActivity[j] = Rec$Rec}
if (nrow(Rec) >  1)
{
for (line in 1:nrow(Rec))
{ # line = 1
if (Rec$WindowStart[line] < Start) {Rec$WindowStart[line] = Start}
if (Rec$WindowEnd[line] > End) {Rec$WindowEnd[line] = End}
}
Rec$Length = Rec$WindowEnd - Rec$WindowStart
Genes1$RecombActivity[j] = sum(as.numeric(Rec$Length)*as.numeric(Rec$Rec)) / sum(Rec$Length)
}
}
## get average ROH coverage for each gene
Roh1 = Roh[Roh$CHR == chr,]
for (j in 1:nrow(Genes1))
{ # j = 5
Start = Genes1$GeneStart[j]; End = Genes1$GeneEnd[j];             #  169849631 169894267
Roh2 = Roh1[Roh1$EndofWindow > Start & Roh1$StartofWindow < End,] #  169794359 170112399
if (nrow(Roh2) == 1) {Genes1$Coverage[j] = Roh2$coverage}
if (nrow(Roh2) >  1)
{
for (line in 1:nrow(Roh2))
{ # line = 1
if (Roh2$StartofWindow[line] < Start) {Roh2$StartofWindow[line] = Start}
if (Roh2$EndofWindow[line] > End) {Roh2$EndofWindow[line] = End}
}
Roh2$Length = Roh2$EndofWindow - Roh2$StartofWindow
Genes1$RohCoverage[j] = sum(as.numeric(Roh2$Length)*as.numeric(Roh2$coverage)) / sum(Roh2$Length)
}
}
if (chr == 1) {FINAL = Genes1}
if (chr >  1) {FINAL = rbind(FINAL,Genes1)}
} # warnings()
## delete all unziped recomb map files
files <- list.files("../../Body/1Raw/RecombMap/")
files = setdiff(files,c('plink.GRCh37.map.zip'))
for (i in 1:length(files))
{ # i = 1
file = paste('../../Body/1Raw/RecombMap/',files[i],sep='')
if (file.exists(file)) file.remove(file)
}
rm(list=ls(all = TRUE))
## read coverage for each window:
Roh = read.table("../../Body/3Results/CoverageROHForWindows.txt")
## read genes:
Genes = read.table("../../Body/1Raw/gencode.v25.annotation.gtf.Genes.Shet.pLI.FIS.RVIS.GHIS.KnKs.GC.BrainSpecificRanking.Branch", header = TRUE)
Genes = Genes[Genes$GeneChr %in% c(1:22),]; nrow(Genes)
## unzip recomb map
unzip("../../Body/1Raw/RecombMap/plink.GRCh37.map.zip", exdir = "../../Body/1Raw/RecombMap/")
for (chr in 1:22)
{ # chr = 1
Genes1 = Genes[Genes$GeneChr == chr,];
Genes1$RohCoverage = 0
Genes1$RecombActivity = 0
## get average recombination for each gene
infile = paste('../../Body/1Raw/RecombMap/plink.chr',chr,'.GRCh37.map',sep = ''); RecMap = read.table(infile)
RecMapStart = RecMap[-nrow(RecMap),c(3,4)]; names(RecMapStart)=c('RecStart','WindowStart')
RecMapEnd = RecMap[-1,c(3,4)]; names(RecMapEnd)=c('RecEnd','WindowEnd')
RecMap = cbind(RecMapStart,RecMapEnd); RecMap$Rec = RecMap$RecEnd-RecMap$RecStart
# plot(RecMap$RecStart,RecMap$Rec, pch = '.', main = chr)
for (j in 1:nrow(Genes1))
{ # j = 5
Start = Genes1$GeneStart[j]; End = Genes1$GeneEnd[j];              #  169849631 169894267
Rec = RecMap[RecMap$WindowEnd > Start & RecMap$WindowStart < End,] #  169794359 170112399
if (nrow(Rec) == 1) {Genes1$RecombActivity[j] = Rec$Rec}
if (nrow(Rec) >  1)
{
for (line in 1:nrow(Rec))
{ # line = 1
if (Rec$WindowStart[line] < Start) {Rec$WindowStart[line] = Start}
if (Rec$WindowEnd[line] > End) {Rec$WindowEnd[line] = End}
}
Rec$Length = Rec$WindowEnd - Rec$WindowStart
Genes1$RecombActivity[j] = sum(as.numeric(Rec$Length)*as.numeric(Rec$Rec)) / sum(Rec$Length)
}
}
## get average ROH coverage for each gene
Roh1 = Roh[Roh$CHR == chr,]
for (j in 1:nrow(Genes1))
{ # j = 5
Start = Genes1$GeneStart[j]; End = Genes1$GeneEnd[j];             #  169849631 169894267
Roh2 = Roh1[Roh1$EndofWindow > Start & Roh1$StartofWindow < End,] #  169794359 170112399
if (nrow(Roh2) == 1) {Genes1$RohCoverage[j] = Roh2$coverage}
if (nrow(Roh2) >  1)
{
for (line in 1:nrow(Roh2))
{ # line = 1
if (Roh2$StartofWindow[line] < Start) {Roh2$StartofWindow[line] = Start}
if (Roh2$EndofWindow[line] > End) {Roh2$EndofWindow[line] = End}
}
Roh2$Length = Roh2$EndofWindow - Roh2$StartofWindow
Genes1$RohCoverage[j] = sum(as.numeric(Roh2$Length)*as.numeric(Roh2$coverage)) / sum(Roh2$Length)
}
}
if (chr == 1) {FINAL = Genes1}
if (chr >  1) {FINAL = rbind(FINAL,Genes1)}
} # warnings()
## delete all unziped recomb map files
files <- list.files("../../Body/1Raw/RecombMap/")
files = setdiff(files,c('plink.GRCh37.map.zip'))
for (i in 1:length(files))
{ # i = 1
file = paste('../../Body/1Raw/RecombMap/',files[i],sep='')
if (file.exists(file)) file.remove(file)
}
View(FINAL)
write.table(FINAL, "../../Body/3Results/GeneRohRecomb.txt", row.names = FALSE, quote = FALSE)
rm(list=ls(all = TRUE))
## read
Roh = read.table("../../Body/3Results/GeneRohRecomb.txt")
View(Roh)
Roh = read.table("../../Body/3Results/GeneRohRecomb.txt", header = TRUE)
View(Roh)
cor.test(Roh$RohCoverage,Roh$RecombActivity, method = 'spearman')
plot(Roh$RohCoverage,Roh$RecombActivity) # strong negative
Roh = Roh[Roh$RohCoverage > 0,]
Roh = Roh[Roh$RecombActivity > 0,]
### ROH vs recombination
cor.test(Roh$RohCoverage,Roh$RecombActivity, method = 'spearman') # strong negative
plot(Roh$RohCoverage,Roh$RecombActivity) # strong negative
plot(log2(Roh$RohCoverage),Roh$RecombActivity) # strong negative
plot(log2(Roh$RohCoverage),log2(Roh$RecombActivity)) # strong negative
Roh$GeneType
table(Roh$GeneType)
summary(Roh[Roh$GeneType != 'protein_coding',]$RohCoverage)
summary(Roh[Roh$GeneType == 'protein_coding',]$RohCoverage)
cor.test(Roh$RohCoverage,Roh$SelCoeffHet, method = 'spearman') # strong negative
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$SelCoeffHet)
summary(a)
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$SelCoeffHet); summary(a)  # SelCoeffHet => weak negative effect
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$GenomeWideHaploinsufficiencyScore); summary(a)  # SelCoeffHet => weak negative effect
View(Roh)
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$KnKsMouse); summary(a)  # SelCoeffHet => weak negative effect
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$KnKsMouse + Roh$GenomeWideHaploinsufficiencyScore); summary(a)  # positive
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$KnKsMouse + Roh$FunctionalIndispensabilityScore); summary(a)  # positive
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$FunctionalIndispensabilityScore); summary(a)  # positive
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$ProbOfBeingLofIntolerant); summary(a)  # positive
cor.test(Roh$SelCoeffHet,Roh$ProbOfBeingLofIntolerant, method = 'spearman')
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$ProbOfBeingLofIntolerant); summary(a)  # weak negative
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$ResidualVariationIntoleranceScore); summary(a)  # weak negative
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$FunctionalIndispensabilityScore); summary(a)  # weak negative
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$GcContent); summary(a)  # nothing
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$GcContent + Roh$KnKsMouse); summary(a)  # negative strong
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$GcContent + Roh$KnKsMouse) + Roh$SelCoeffHet); summary(a)  # negative strong
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$GcContent + Roh$KnKsMouse + Roh$SelCoeffHet); summary(a)  # negative strong
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$GcContent + Roh$KnKsMouse + Roh$ProbOfBeingLofIntolerant); summary(a)  # negative strong
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$GcContent + Roh$KnKsMouse + Roh$ProbOfBeingLofIntolerant + Roh$SelCoeffHet); summary(a)  # negative strong
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$KnKsMouse + Roh$Branch + Roh$SelCoeffHet); summary(a)  # negative strong
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$Branch); summary(a)  # nothing
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$KnKsMouse); summary(a)  # positive
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$Branch); summary(a)  # strong positive
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$ProbOfBeingLofIntolerant); summary(a)  # weak negative
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$SelCoeffHet); summary(a)               # weak negative
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$GcContent); summary(a)  # negative strong
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$ResidualVariationIntoleranceScore); summary(a)  # nothing
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$GenomeWideHaploinsufficiencyScore); summary(a)  # nothing
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$FunctionalIndispensabilityScore); summary(a)  # nothing
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$GcContent + Roh$KnKsMouse + Roh$Branch + Roh$ProbOfBeingLofIntolerant + Roh$SelCoeffHet); summary(a)  # negative strong
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$GcContent + Roh$KnKsMouse + Roh$Branch + Roh$ProbOfBeingLofIntolerant + Roh$SelCoeffHet); summary(a)
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$GcContent + Roh$KnKsMouse + Roh$Branch + Roh$SelCoeffHet); summary(a)
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$GcContent + Roh$KnKsMouse + Roh$Branch); summary(a)
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$GcContent + Roh$KnKsMouse + Roh$Branch + Roh$SelCoeffHet); summary(a)
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$GcContent + Roh$KnKsMouse + Roh$Branch); summary(a)
a<-lm(Roh$RohCoverage ~ Roh$RecombActivity + Roh$GcContent + Roh$Branch); summary(a)
a<-lm(scale(Roh$RohCoverage) ~ scale(Roh$RecombActivity) + scale(Roh$GcContent) + scale(Roh$Branch)); summary(a)
a<-lm(scale(Roh$RohCoverage) ~ 0 + scale(Roh$RecombActivity) + scale(Roh$GcContent) + scale(Roh$Branch)); summary(a)
